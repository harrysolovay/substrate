// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_offences
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-31, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=1
// --repeat=1
// --pallet=pallet_offences
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./frame/offences/src/weights.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_offences.
pub trait WeightInfo {
	fn report_offence_without_hook(n: u32, ) -> Weight;
}

/// Weights for pallet_offences using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Staking SlashRewardFraction (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking ErasStartSessionIndex (r:1 w:0)
	// Storage: Staking EarliestUnappliedSlash (r:1 w:1)
	// Storage: Staking Invulnerables (r:1 w:0)
	// Storage: Staking ValidatorSlashInEra (r:1 w:1)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Storage: Staking SpanSlash (r:1 w:1)
	// Storage: Staking Validators (r:1 w:1)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: Staking Nominators (r:1 w:0)
	// Storage: Staking OffendingValidators (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: Staking NominatorSlashInEra (r:16 w:16)
	fn report_offence_without_hook(_n: u32, ) -> Weight {
		(512_484_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(65 as Weight))
			.saturating_add(T::DbWeight::get().writes(59 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Staking SlashRewardFraction (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking ErasStartSessionIndex (r:1 w:0)
	// Storage: Staking EarliestUnappliedSlash (r:1 w:1)
	// Storage: Staking Invulnerables (r:1 w:0)
	// Storage: Staking ValidatorSlashInEra (r:1 w:1)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Storage: Staking SpanSlash (r:1 w:1)
	// Storage: Staking Validators (r:1 w:1)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: Staking Nominators (r:1 w:0)
	// Storage: Staking OffendingValidators (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: Staking NominatorSlashInEra (r:16 w:16)
	fn report_offence_without_hook(_n: u32, ) -> Weight {
		(512_484_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(65 as Weight))
			.saturating_add(RocksDbWeight::get().writes(59 as Weight))
	}
}
